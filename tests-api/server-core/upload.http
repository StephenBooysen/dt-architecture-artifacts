### File Upload API Tests
### This file contains HTTP tests for file upload functionality
### Use REST Client extension in VS Code to run these tests
### Note: File upload requires authentication and multipart form data

@baseUrl = http://localhost:5000

### Prerequisites: Login first (run auth.http login test)

### Note: VS Code REST Client extension supports file uploads using multipart/form-data
### For file uploads, you'll need actual files in your workspace or use the content directly

### 1. Upload a simple text file
POST {{baseUrl}}/api/upload HTTP/1.1
Content-Type: multipart/form-data; boundary=boundary123

--boundary123
Content-Disposition: form-data; name="file"; filename="upload-test.txt"
Content-Type: text/plain

This is a test file uploaded via the API.
It contains simple text content for testing upload functionality.

Line 1: Upload test content
Line 2: File upload verification
Line 3: API testing in progress

Status: Upload test successful
--boundary123
Content-Disposition: form-data; name="folder"

uploads
--boundary123--

### 2. Upload a markdown file
POST {{baseUrl}}/api/upload HTTP/1.1
Content-Type: multipart/form-data; boundary=boundary456

--boundary456
Content-Disposition: form-data; name="file"; filename="uploaded-document.md"
Content-Type: text/markdown

# Uploaded Document

This markdown file was uploaded via the API upload endpoint.

## Features Tested
- File upload functionality
- Multipart form data handling
- File type detection
- Folder placement

## Content Structure
### Headers
This document contains various markdown elements to test rendering.

### Lists
- Item 1: Upload testing
- Item 2: API validation
- Item 3: File management

### Code Blocks
```javascript
// Example code in uploaded file
function uploadTest() {
    console.log('File uploaded successfully!');
    return true;
}
```

## Status
âœ… Upload completed successfully
--boundary456
Content-Disposition: form-data; name="folder"

docs/uploaded
--boundary456--

### 3. Upload a JSON configuration file
POST {{baseUrl}}/api/upload HTTP/1.1
Content-Type: multipart/form-data; boundary=boundary789

--boundary789
Content-Disposition: form-data; name="file"; filename="config.json"
Content-Type: application/json

{
    "application": {
        "name": "Architecture Artifacts",
        "version": "1.0.0",
        "description": "Uploaded configuration file for testing"
    },
    "features": {
        "fileUpload": true,
        "authentication": true,
        "templates": true,
        "search": true,
        "gitIntegration": true
    },
    "upload": {
        "maxFileSize": "10MB",
        "allowedTypes": ["txt", "md", "json", "pdf", "png", "jpg"],
        "destination": "content/",
        "testStatus": "completed"
    },
    "timestamp": "2024-01-15T10:30:00Z"
}
--boundary789
Content-Disposition: form-data; name="folder"

config
--boundary789--

### 4. Upload to root directory (no folder specified)
POST {{baseUrl}}/api/upload HTTP/1.1
Content-Type: multipart/form-data; boundary=boundary101

--boundary101
Content-Disposition: form-data; name="file"; filename="root-upload.txt"
Content-Type: text/plain

This file is uploaded to the root content directory.

Purpose: Test upload without specifying a folder.
Location: Content root
Status: Testing root upload functionality
--boundary101--

### 5. Verify uploaded files by getting file tree
GET {{baseUrl}}/api/files

### 6. Check specific uploaded files
GET {{baseUrl}}/api/files/uploads/upload-test.txt

### 7. Check uploaded markdown file
GET {{baseUrl}}/api/files/docs/uploaded/uploaded-document.md

### 8. Check uploaded JSON configuration
GET {{baseUrl}}/api/files/config/config.json

### 9. Check root uploaded file
GET {{baseUrl}}/api/files/root-upload.txt

### Error Test Cases

### 10. Try to upload without authentication (logout first)
POST {{baseUrl}}/api/auth/logout HTTP/1.1

###
POST {{baseUrl}}/api/upload HTTP/1.1
Content-Type: multipart/form-data; boundary=boundary999

--boundary999
Content-Disposition: form-data; name="file"; filename="unauthorized.txt"
Content-Type: text/plain

This upload should fail due to lack of authentication.
--boundary999--

### 11. Login again for remaining tests
POST {{baseUrl}}/api/auth/login HTTP/1.1
Content-Type: application/json

{
    "username": "testuser",
    "password": "testpass123"
}

### 12. Try to upload without file
POST {{baseUrl}}/api/upload HTTP/1.1
Content-Type: multipart/form-data; boundary=boundary888

--boundary888
Content-Disposition: form-data; name="folder"

test-folder
--boundary888--

### 13. Try to upload to invalid folder path (path traversal attempt)
POST {{baseUrl}}/api/upload HTTP/1.1
Content-Type: multipart/form-data; boundary=boundary777

--boundary777
Content-Disposition: form-data; name="file"; filename="malicious.txt"
Content-Type: text/plain

This should not be allowed in an invalid path.
--boundary777
Content-Disposition: form-data; name="folder"

../../../etc
--boundary777--

### 14. Upload file with long filename
POST {{baseUrl}}/api/upload HTTP/1.1
Content-Type: multipart/form-data; boundary=boundary666

--boundary666
Content-Disposition: form-data; name="file"; filename="very-long-filename-that-tests-the-system-limits-and-file-naming-conventions-in-the-upload-functionality.txt"
Content-Type: text/plain

Testing upload with very long filename.
--boundary666
Content-Disposition: form-data; name="folder"

test-long-names
--boundary666--

### 15. Upload file with special characters in filename
POST {{baseUrl}}/api/upload HTTP/1.1
Content-Type: multipart/form-data; boundary=boundary555

--boundary555
Content-Disposition: form-data; name="file"; filename="file with spaces & special chars!@#.txt"
Content-Type: text/plain

Testing upload with special characters in filename.
--boundary555
Content-Disposition: form-data; name="folder"

test-special-chars
--boundary555--

### Download Test Cases

### 16. Download uploaded text file
GET {{baseUrl}}/api/download/uploads/upload-test.txt

### 17. Download uploaded markdown file
GET {{baseUrl}}/api/download/docs/uploaded/uploaded-document.md

### 18. Download uploaded JSON file
GET {{baseUrl}}/api/download/config/config.json

### 19. Try to download non-existent file
GET {{baseUrl}}/api/download/non-existent-file.txt

### 20. Try to download with path traversal
GET {{baseUrl}}/api/download/../../../etc/passwd

### Large File Upload Test (simulated)

### 21. Upload a larger text file (simulated large content)
POST {{baseUrl}}/api/upload HTTP/1.1
Content-Type: multipart/form-data; boundary=boundary444

--boundary444
Content-Disposition: form-data; name="file"; filename="large-file-test.txt"
Content-Type: text/plain

This is a simulated large file for testing upload limits and performance.

[Large content simulation - Line 1]
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitationn ullamco laboris nisi ut aliquip ex ea commodo consequat.

[Large content simulation - Line 2]
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

[Repeated content to simulate size...]
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.

[End of large file simulation]
Upload test completed for large file functionality.
--boundary444
Content-Disposition: form-data; name="folder"

large-files
--boundary444--

### Final Verification

### 22. Get complete file tree to verify all uploads
GET {{baseUrl}}/api/files

### 23. Check a few uploaded files for content verification
GET {{baseUrl}}/api/files/large-files/large-file-test.txt

### Cleanup Test Files (optional - uncomment to clean up)
# DELETE {{baseUrl}}/api/files/uploads/upload-test.txt
# DELETE {{baseUrl}}/api/folders/docs/uploaded
# DELETE {{baseUrl}}/api/folders/config
# DELETE {{baseUrl}}/api/files/root-upload.txt
# DELETE {{baseUrl}}/api/folders/test-long-names
# DELETE {{baseUrl}}/api/folders/test-special-chars
# DELETE {{baseUrl}}/api/folders/large-files
# DELETE {{baseUrl}}/api/folders/uploads