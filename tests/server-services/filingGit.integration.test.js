const FilingGitProvider = require('../../server/src/services/filing/providers/filingGit');
const fs = require('fs-extra');
const path = require('path');
const { EventEmitter } = require('events');

describe('FilingGitProvider Integration Test', () => {
  let provider;
  let eventEmitter;
  const testRepoUrl = 'https://github.com/StephenBooysen/dt-architecture-artifacts-testing.git';
  const testLocalPath = path.join(__dirname, 'integration-test-repo');

  beforeAll(async () => {
    // Clean up any existing test directory
    await fs.remove(testLocalPath);
    
    eventEmitter = new EventEmitter();
    
    // Add event listeners to track what's happening
    eventEmitter.on('FilingGitProvider:Initialized', (data) => {
      console.log('üöÄ Provider initialized:', data);
    });
    
    eventEmitter.on('FilingGitProvider:Cloning', (data) => {
      console.log('üì• Cloning repository:', data);
    });
    
    eventEmitter.on('FilingGitProvider:Pulling', (data) => {
      console.log('‚¨áÔ∏è Pulling changes:', data);
    });
    
    eventEmitter.on('FilingGitProvider:Committed', (data) => {
      console.log('‚úÖ Changes committed:', data);
    });
    
    eventEmitter.on('FilingGitProvider:Pushed', (data) => {
      console.log('üöÄ Changes pushed:', data);
    });
    
    eventEmitter.on('filing:create', (data) => {
      console.log('üìÑ File created:', data.filePath, data.isDraft ? '(draft)' : '(committed)');
    });
    
    eventEmitter.on('filing:mkdir', (data) => {
      console.log('üìÅ Directory created:', data.dirPath);
    });

    // Initialize provider - this will clone the repo
    provider = new FilingGitProvider({
      repo: testRepoUrl,
      localPath: testLocalPath,
      branch: 'main',
      fetchInterval: 60000 // 1 minute for testing
    }, eventEmitter);
    
    // Wait for initialization to complete - check if git is ready
    let retries = 0;
    const maxRetries = 30;
    while (!provider.git && retries < maxRetries) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      retries++;
    }
    
    if (!provider.git) {
      throw new Error('Git initialization timed out');
    }
    
    console.log('‚úÖ Git provider is ready for testing');
  }, 60000); // 60 second timeout for setup

  afterAll(async () => {
    if (provider) {
      provider.destroy();
    }
    // Clean up test directory
    await fs.remove(testLocalPath);
  });

  it('should create a folder and file, then commit to the repository', async () => {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const testFolderName = `test-folder-${timestamp}`;
    const testFileName = `test-file-${timestamp}.txt`;
    const testFileContent = `This is a test file created at ${new Date().toISOString()}\n\nThis test verifies that our FilingGitProvider can:\n- Create directories\n- Create files\n- Track draft files\n- Commit and push changes to GitHub\n\nGenerated by integration test.`;

    console.log('\nüß™ Starting integration test...');
    console.log(`üìÅ Creating folder: ${testFolderName}`);
    console.log(`üìÑ Creating file: ${testFolderName}/${testFileName}`);

    // Step 1: Create a directory
    await provider.mkdir(testFolderName);
    
    // Verify the directory was created locally
    const dirExists = await provider.exists(testFolderName);
    expect(dirExists).toBe(true);
    console.log('‚úÖ Directory created locally');

    // Step 2: Create a file in the directory
    const filePath = `${testFolderName}/${testFileName}`;
    await provider.create(filePath, testFileContent);
    
    // Verify the file was created locally
    const fileExists = await provider.exists(filePath);
    expect(fileExists).toBe(true);
    console.log('‚úÖ File created locally');

    // Step 3: Read the file to verify content
    const readContent = await provider.read(filePath, 'utf8');
    expect(readContent).toBe(testFileContent);
    console.log('‚úÖ File content verified');

    // Step 4: Check that files are marked as drafts
    const draftFiles = await provider.getDraftFiles();
    expect(draftFiles).toContain(filePath);
    console.log('‚úÖ Files correctly marked as drafts:', draftFiles);

    // Step 5: List directory contents
    const dirContents = await provider.list(testFolderName);
    expect(dirContents).toContain(testFileName);
    console.log('‚úÖ Directory listing verified:', dirContents);

    // Step 6: Get detailed file stats
    const fileStats = await provider.stat(filePath);
    expect(fileStats.isFile).toBe(true);
    expect(fileStats.isDraft).toBe(true);
    expect(fileStats.size).toBeGreaterThan(0);
    console.log('‚úÖ File stats verified:', {
      size: fileStats.size,
      isFile: fileStats.isFile,
      isDraft: fileStats.isDraft
    });

    // Step 7: Commit and push changes
    const commitMessage = `Integration test: Created ${testFolderName} with ${testFileName}`;
    console.log(`üì§ Committing changes: "${commitMessage}"`);
    
    const commitResult = await provider.publish(commitMessage);
    expect(commitResult).toHaveProperty('commit');
    console.log('‚úÖ Changes committed and pushed:', commitResult);

    // Step 8: Verify drafts are cleared after commit
    const draftsAfterCommit = await provider.getDraftFiles();
    expect(draftsAfterCommit).toHaveLength(0);
    console.log('‚úÖ Draft files cleared after commit');

    // Step 9: Verify file stats show it's no longer a draft
    const fileStatsAfterCommit = await provider.stat(filePath);
    expect(fileStatsAfterCommit.isDraft).toBe(false);
    console.log('‚úÖ File no longer marked as draft after commit');

    console.log('\nüéâ Integration test completed successfully!');
    console.log(`üîó Check the repository at: ${testRepoUrl}`);
    console.log(`üìÅ Look for folder: ${testFolderName}`);
    console.log(`üìÑ Look for file: ${testFolderName}/${testFileName}`);

  }, 60000); // 60 second timeout for the test

  it('should handle file updates and show proper draft tracking', async () => {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const testFileName = `update-test-${timestamp}.txt`;
    const originalContent = `Original content created at ${new Date().toISOString()}`;
    const updatedContent = `Updated content modified at ${new Date().toISOString()}`;

    console.log('\nüß™ Testing file updates...');

    // Create initial file
    await provider.create(testFileName, originalContent);
    let draftFiles = await provider.getDraftFiles();
    expect(draftFiles).toContain(testFileName);
    console.log('‚úÖ Initial file created and marked as draft');

    // Commit the initial file
    await provider.publish(`Created ${testFileName}`);
    draftFiles = await provider.getDraftFiles();
    expect(draftFiles).toHaveLength(0);
    console.log('‚úÖ Initial file committed');

    // Update the file
    await provider.update(testFileName, updatedContent);
    draftFiles = await provider.getDraftFiles();
    expect(draftFiles).toContain(testFileName);
    console.log('‚úÖ File updated and marked as draft again');

    // Verify updated content
    const readContent = await provider.read(testFileName, 'utf8');
    expect(readContent).toBe(updatedContent);
    console.log('‚úÖ Updated content verified');

    // Commit the update
    await provider.publish(`Updated ${testFileName}`);
    draftFiles = await provider.getDraftFiles();
    expect(draftFiles).toHaveLength(0);
    console.log('‚úÖ Update committed successfully');

    console.log('üéâ Update test completed successfully!');

  }, 30000); // 30 second timeout
});